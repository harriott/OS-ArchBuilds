# vim: ft=sh sw=2:

# Joseph Harriott

# Bash configurations that are also useful in Console and as root.

# $OSAB/nodes/Bash/bashrc-generic  symlinked in  $OSAB/nodes/set/jo-0.sh, then
#  for jo: sourced by  $AjB/bash_profile  &  $AjB/bashrc
#  for root: sourced by  $OSAB/nodes-root/bashrc
# see  $OSAB/nodes/set/repair.sh  for checking if this was sourced

alias fin='figlet -f univers finished'
lnd () { [ -d $2 ] && rm -r $2; ln -sf $1 $2; } # symlink a directory
mn () { MANPAGER='nvim +Man!' MANWIDTH=999 man $1; }
source $ITscc/CP/wfxr-code-minimap/completions/bash/code-minimap.bash  # code-minimap ~/.bashrc
source $ITscc/unix-linux/trapd00r-LS_COLORS/lscolors.sh  # fancy colouring, echo "$LS_COLORS"
source $OSL/nodes/bashrc-generic

[ $TERM != 'screen-256color' ] && [[ -z $in_nvim ]] && [ $(logname) == $(whoami) ] && neofetch
# - won't run in  tmux  or after  su

# <esc> <esc> prefixes sudo on last command
source $ITscc/CP/ohmybash-sudo.plugin.sh

ft () {
  if [ "$1" ]; then
    of="$ulLB/FIGletFontsTest.txt"
    echo "$1" > $of; echo '' >> $of
    for font in big doh doom isometric1 isometric2 larry3d nancyj-fancy nancyj nancyj-underlined ogre poison puffy radical_ rowancap shadow standard starwars stellar stop straight tombstone trashman ttyb tty univers usaflag utopia xbriteb xttyb; do
      figlet -t -f $font -w 250 "$1" >> $of
      echo "- $font" >> $of
    done
    sed -i 's/ \+$//' $of
    echo "results are in $of"
  else
    echo "ft 'some text'"
  fi
}

se () {
  echo -n "${tpf2}aliases:${tpfn}  "; compgen -a | awk '{print}' ORS=' : '; echo ''
  echo -n "${tpf2}builtins:${tpfn} "; compgen -b | awk '{print}' ORS=' : '; echo ''
  echo -n "${tpf2}commands:${tpfn} "; compgen -c | awk '{print}' ORS=' : '; echo ''
}
# tmux
alias u=tmux
  alias tkt='u kill-server > /dev/null 2>&1; tmux'  # rarely used

#=> awesome or Openbox on a machine
startxa () { ln -sf $ABjo/xinitrcs/awesome ~/.xinitrc; }
startxo () { ln -sf $ABjo/xinitrcs/openbox ~/.xinitrc; }

#=> better file managing
alias e='eza --icons'
  alias a='e -aF'  # grid, handily showing up symlinks
  alias es='e -alR'  # show permissions and symlinks recursively
  alias et='e -T'  # for tree
alias ed='eza -D'  # show directories only
alias edt='eza -DT'  # show directory tree

alias l='ls --color=auto'

alias ltd='lsd -d --tree'  # more in  $OSL/bashrc-generic

alias mo='moar'

c() { if [ -n "$1" ]; then cd "$1" || return 1; else cd ..; fi; l -a; }
# - https://superuser.com/a/1244522/242800

export PAGER=less
source $OSL/nodes/bashrc-generic

if [ -s "/usr/bin/broot" ]; then
  source ~/.config/broot/launcher/bash/br  # (first  broot  adds to  .bashrc)
fi # configures broot

if [ -s "/usr/share/fzf" ]; then
  # alias f="fzf --preview 'bat --color=always {} | head -500'"
  alias f="fzf --preview 'bat --color=always {}'"
  eval "$(fzf --bash)"  # key bindings and fuzzy completion
  export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --no-ignore'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

r () {
  [ $TERM != 'screen-256color' ] && pi="--cmd='set preview_images true'"
  eval "ranger --choosedir=$HOME/.ranger_last_visited $pi $@"
  cd "$(cat $HOME/.ranger_last_visited)"
}  # r "$Drpbx/CAM-best/Classic Yo-Yo"

#==> bat
alias b='bat'  # syntax highlit cat
alias bd='bat -d'  # showing changes from git index
alias bm='batman'  # better manual (in wide enough terminal)
alias pb='prettybat'  # tidied code
export BAT_PAGER=less

#==> system monitoring
alias bt='bashtop'
alias gl='glances'

#==> virtualenvwrapper
export WORKON_HOME=~/.virtualenvs  # $WORKON_HOME
[[ -f /usr/bin/virtualenvwrapper.sh ]] && source /usr/bin/virtualenvwrapper_lazy.sh

#=> clamscan 0 preferred log basename
# cslbn=$clamscan/clamscan
if [ $myDrA ]; then
  cslLocation="$ulLAb/ml-$host"
else
  cslLocation="/home/jo/Arch"
fi
cslbn=$cslLocation/cs

#=> clamscan 1 scan
scs () {
  echo "about to clamscan /"
  sudo clamscan -r --exclude-dir='/media|/mnt|/sys' / 2>&1 | tee $cslbn/$(date '+%y%m%d-%H%M').log
  sudo chown jo:jo $cslbn.log
}  # end of log shows time taken

#=> clamscan 2 filter the results
# $vfv/syntax/cslF.vim

csF () {
  if [ $1 ]; then
    cslFbn=$cslbn"-$1-FOUND"
      cslF="$cslFbn.log"
    if [ $2 ]; then
      # filter down to some remaining threats - might not catch all
      cslFt="$cslFbn-threats.log"
      if [ -f $cslF ]; then
        cp $cslF $cslFt
        sed -i '/Heuristics.Phishing.Email.SpoofedDomain\|Sanesecurity\|Urlhaus/!d' $cslFt
        sed -i '1s/^/vim: ft=cslF:\n\n/' $cslFt
        echo "- possible threats are now listed in ${tpf7}$cslFt${tpfn}"
      else
        echo "$cslF  ain't there"
      fi
    else
      # make clamscanFOUND log file - should be enough
      cp $cslbn.log $cslF
      sed -i '/ FOUND$/!d' $cslF
      sed -i 's/ FOUND$//' $cslF
      sed -i '1s/^/vim: ft=cslF:\n\n/' $cslF
      echo "- now look in ${tpf7}$cslF${tpfn}"
    fi
  else
    echo "- need a datecode"
  fi
}  # make clamscanFOUND log file - should be enough

#=> f1t2t3
if [ $host = 'sbMb' ]; then
  alias f1t2t3="bash ~/Arch/f1t2t3/f1t2t3.sh"
fi

#=> internetish
Q () { pacman -Qs $1 | xcol $1; }  # or use  pacsearch

suho () {
  ipnf=$(ip neigh)
  ipn=${ipnf:0:11}
  mapfile -t fi < <(doas fping -g "$ipn.0/24" 2>&1)
  printf '%s\n' "${fi[@]}" | grep 'alive$'
} # subnet hosts

#=> pactree
alias ptc='pactree -c '  # coloured
alias ptr='pactree -cr '  # reversed

pts () { pactree -u $1 | sort | tr '\n' '~' | sed 's/~/  /g'; echo; }  # scrunched

#=> system
plo(){
  plof="$machLg/usr/pip-list-outdated.txt"
  echo > $plof
  echo 'output of plo() ($OSAB/Bash/bashrc-generic)' >> $plof
  echo >> $plof
  pip list --outdated >> $plof
  echo >> $plof
} # takes a while

seg () {
  e="$machLg/jo/environment.txt"
  echo 'vim: fdl=0 ft=build:' > $e
  echo '' >> $e
  echo "# commands" >> $e
  compgen -c | awk '{print}' ORS=' : ' >> $e
  echo '' >> $e
}

uf(){
  ufl="$ulLAb/ml-$host/usr-files.txt"
  echo 'vim: set nowrap:' > $ufl
  echo >> $ufl
  echo 'output of  uf() ($OSAB/Bash/bashrc-generic)' >> $ufl
  echo >> $ufl
  e -al /usr/* >> $ufl
  echo >> $ufl
} # usr files

#==> fonts
usf(){
  usft="$machLg/usr/share_fonts-tree.txt"
  echo 'vim: set nowrap:' > $usft
  echo >> $usft
  echo 'output of usf() ($OSAB/Bash/bashrc-generic)' >> $usft
  echo >> $usft
  tree /usr/share/fonts/ >> $usft
  echo >> $usft
}

#=> turbostat
alias ts1='sudo turbostat --interval 2 --quiet'

ts2 () {
  if [ $TERM == 'linux' ]; then
    echo "not in a resizable window"  # Console
  elif [[ -n $TMUX ]]; then
    echo "now detach tmux and run ts2 again"
    export reattachTmux=ts2
  else
    export reattachTmux=
    tc=109 # columns needed for turbostat
    read rows cols < <( stty size )
    if (( $cols < $tc )); then
      resize -s $rows $tc
    else
      echo "columns already >= $tc"
      sleep 1
    fi
    tmux a
  fi  # tmux
} # widen terminal for turbostat

