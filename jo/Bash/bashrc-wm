# vim: ft=bash sw=2:

# Joseph Harriott, Sat 11 Jan 2025

# $AjB/bashrc-wm   sourced by  $AjB/bashrc

# stuff that's useful when a Window Manager is installed

alias aw='ansiweather -f 7'
alias R='R --quiet'
alias ws='w3m -s'  # squeezing blank lines
source $OSL/nodes/bashrc-wm

#=> AV
fm () {
  for category in best good good-tA-North-US joy toSort0 toSort1 toSort1-UK toSort1-USA; do
    fd $1 "$Drpbx/Cop/AM-$category"; done
} # fm lowlands | grep Baez

fv () {
  for VsL in /mnt/*; do
    Vss=($(find $VsL -mindepth 1 -maxdepth 1 -type d -name "Vs*" 2>/dev/null))
    for Vs in "${Vss[@]}"; do
      echo $Vs
      find $Vs -iname "*$1*" | xcol "$1"
    done
  done
} # fv cat  fv 'Dog Vision'

# Audio:
alias vp='vimpc'
mia () { for v in "$@"; do echo "$(mediainfo --Output='Audio;%Channels%' "$v")   $(mediainfo --Output='Audio;%Format%' "$v")   $(mediainfo --Output='Audio;%BitRate%' "$v") b/s   $(mediainfo --Output='Audio;%SamplingRate%' "$v") Hz   "$v""; done; }  # mi *

#==> ffmpeg 0
alias ffmhb='nice -n 19 ffmpeg -hide_banner'; alias ffi='ffmhb -i'
cw () { for f in **/*.webm; do echo ''; echo ''; ffi "$f" -c:a libvorbis -aq 4 "${f/%.webm/ webm}.ogg"; rm "$f"; done; fin; } # for Poweramp.  fd -tf -e webm

frames () {
  ffmpeg -i $1 -vcodec copy -f rawvideo -y /dev/null 2>&1
} # $1 mustn't contain spaces...

vs () {
  if [ $1 ]; then
    if [ $2 ]; then
      if [[ $2 == '0' || $2 == '1' ]]; then
        trfs=($(find . -maxdepth 1 -type f -name "*.trf"))
        trfs=(${trfs[@]/#\.\//})  # remove leading ./
        nt=${#trfs[@]}  # number of trf's
        if [[ $nt == 0 ]]; then
          echo "step 1: vs <video_to_stabilise>" # because no trf file has been made
        else
          if [[ $nt == 1 ]]; then
            trf=${trfs[0]}  # only one trf file
          else
            echo ${trfs[@]}
            read -p "choose an index " ti
            if [[ $ti =~ ^[0-9]+$ ]] && [ $ti -ge 0 ] && [ $ti -le $((nt-1)) ]; then
              # $ti is an integer, and within the range of $trfs
              trf=${trfs[$ti]}
            else
              echo "bad index"
              unset trf
            fi
          fi  # a trf file has been selected, or not
          if [ $trf ]; then
            auc='-an'
            (( $2 )) && auc='-c:a copy'
            shv=($(find . -maxdepth 1 -type f -name "${trf%.*}.*" ! -name $trf))  # divine the shaky video file
            shv=(${shv[@]/#\.\//})  # remove leading ./
            if [ $shv ] && [ -s $shv ]; then
              echo "====== ${tpf2b}vs${tpfn} step 2 stabilising ${tpf2b}$shv${tpfn} with ${tpf2b}$trf${tpfn} to ${tpf2b}$1${tpfn} ======"
              ffmpeg -i $shv -vf vidstabtransform=input=$trf:zoom=0:smoothing=10,unsharp=5:5:0.8:3:3:0.4 -tune film $auc $1
            else
              rm $trf
              echo "removed dangling $trf"
            fi
          fi
        fi
      else
        echo "vs 2nd argument: 0 = no audio, 1 = copy audio"  # vs la2-stabilised.mp4 0
      fi
    else
      vfbn=${1%.*}
      if [ -s $1 ]; then
        echo "====== ${tpf2b}vs${tpfn} 1 getting transform vectors for ${tpf2b}$1${tpfn} ======"
        ffmpeg -i $1 -vf vidstabdetect=stepsize=32:shakiness=10:accuracy=10:result=${1%.*}.trf -f null -
      else
        echo "vs <video_to_stabilise>"  # vs MOV_0001.mp4
      fi
    fi
  else
    echo "step 1: ${tpf2b}vs <video_to_stabilise>${tpfn}  step 2: ${tpf2b}vs <stabilised_video> <audio_choice>${tpfn}"
  fi
}  # stabilize a video

#==> ffmpeg 1 audio trimming
aet () {
  export a="$1"
  trim=1; [[ $2 ]] && [[ $2 -gt '1' ]] && trim=$2
  duration=$(ffprobe -i "$a" -show_format -v quiet | sed -n 's/duration=//p')
  trimmed=$(echo "$duration-$trim" | bc)
  ffi "$a" -c copy -t $trimmed -y "t$a"
  mpv --start=-3 "t$a"
} # aet <anAudioFileToTrimOffEnd> <trimIfGreaterThan1second>

abt () {
  export a="$1"
  trim=1; [[ $2 ]] && trim=$2
  ffmhb -ss $trim -i "$a" -c copy -y "t$a"
  mpv --end=3 "t$a"
} # abt <an_audio_file_to_trim_half_second_off_beginning> 0.3

# mv "t$a" "$a"

#==> ffprobe
alias fpasr='ffprobe -v error -select_streams a:0 -show_entries stream=sample_rate -of default=nw=1:nk=1'
# fpd <video_file_you_want_audio_sample_rate_of>

alias fpabr='ffprobe -v error -select_streams a:0 -show_entries stream=bit_rate -of default=nw=1:nk=1'
# fpd <video_file_you_want_audio_bit_rate_of>

alias fpct='ffprobe -v error -select_streams v:0 -show_entries stream_tags=creation_time -of default=nw=1:nk=1'
# fpct <video_file_you_want_creation_time_of>

alias fpd='ffprobe -v error -show_entries format=duration -of default=nw=1:nk=1'
# fpd <video_file_you_want_duration_of>

alias fpwh='ffprobe -v error -select_streams v:0 -show_entries stream=height,width -of csv=s=x:p=0'
# fpwh <video_file_you_want_WxH_of>

alias fpfr='ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=nw=1:nk=1'
# fpd <video_file_you_want_frame_rate_of>

fpcn () { ffprobe -v error -select_streams $1:0 -show_entries stream=codec_name -of default=nw=1:nk=1 $2; }
# fpcn <a/v> <video_file_you_want_codec_of>

fps () { for v in "$@"; do echo $(fpwh $v) $(fpcn v $v) $(fpfr $v) $(fpcn a $v) $(fpasr $v) $(fpabr $v) $v; done; } # fps <files_you_want_statisitics_of>

#==> yt-dlp
alias y='yt-dlp'
  alias ya='y -f ba'
  alias yf='y -F'  # --list-formats
  y7 () { yt-dlp -f "bv[height<=?720]" "$1"; }

#=> CUPS
alias lpf='lp -o fit-to-page'  # lpf *
alias lpspd='lpstat -p -d'
alias sc5='doas cupsenable ENVY_5530'

#=> documenting - LaTeX
export PATH="/usr/local/texlive/2023/bin/x86_64-linux:$PATH"

ltx () {
  if [[ ! -z $TNt ]]; then
    if [ -d $TNt ]; then
      cd $TNt
      s="sectionHeadings.md"
      > $s
      for f in **/*.tex; do
        echo '' >> $s
        echo "# ${f%.tex}" >> $s
        echo "\$TNt/$f" >> $s
        echo '' >> $s
        sed -e '/section{/!d' $f >> $s
      done
      echo '' >> $s
      sed -i 's/\\section{/    /' $s
      sed -i 's/\\subsection{/        /' $s
      sed -i 's/\\subsubsection{/            /' $s
      sed -i 's/}//' $s
    else
      echo "$TNt  ain't there"
    fi
  else
    echo '$TNt  is undefined'
  fi
}

alias tit='rm *.aux *.listing *.log *.out *.toc *.tcbtemp'  # tidy tex = clear away TeX ancillary files
x () { max_print_line=4000 xelatex -halt-on-error $1 | xcol Missing; }

#=> documenting - Pandoc my markdown notes
for iHS in {0..1}; do  # setup alternative commands to define the header style
    setHeadingsSty[$iHS]="ln -sf $MD4PDF/iih/headings$iHS.sty ~/texmf/tex/latex/m4p/headings.sty"
  done  # (leaves iHS set to 1) pb ~/texmf/tex/latex/m4p/headings.sty

m4psm() {
    eval ${setHeadingsSty[1]}
    export headingtoodeep=####
    redo=0; [ $1 ] && redo=1
    bash $MD4PDF/GNULinux/m4ps.sh $redo 1
  } # m4psm [1 (= redo)]  for muted headings

mt() {
    cd $TeNo
    pwd
    m4ps 0
    figlet -f univers done
} # do my TextNotes

#==> maybe redo, maybe no ToC
m4p() {
    eval ${setHeadingsSty[0]}
    export headingtoodeep=######
    bash $MD4PDF/GNULinux/m4p.sh $1 $2
} # m4p <md_file> [1 (= no ToC)]

m4ps() {
    eval ${setHeadingsSty[0]}
    export headingtoodeep=######
    bash $MD4PDF/GNULinux/m4ps.sh $1 $2
} # m4ps 0 (= don't redo) [1 (= no ToC)]

#=> documenting - PDF
pdfmm () {
  PSpoints=($(pdfinfo $1 | grep ' x ' | sed 's/Page size: //;s/x //;s/ pts//'))
  echo "$1: $(PSpmm ${PSpoints[0]}) wide, $(PSpmm ${PSpoints[1]}) high"
} # pdfmm <pdf>

za () { zathura "$1" & }

#=> Dropbox conflicted copies
# results are noted in time-stamped logs
dcc0 () {
  pushd $Drpbx
  jHMS=$(date "+%y%m%d-%H%M%S")  # o $jHMS
  export DropboxConflictedLog="$Drpbx/conflicted/$jHMS.log"
  echo 'scanning for conflicted copies'
  echo 'vim: nowrap:' > $DropboxConflictedLog
  echo '' >> $DropboxConflictedLog
  find $PWD -path $Drpbx/conflicted -prune -o -regex ".*'s conflicted copy.*\|.* (Copie en conflit de .*" -print >> $DropboxConflictedLog
  # fd -E conflicted conflicted
  gvim $DropboxConflictedLog
  popd
}  # lists them
dcc1 () {
  if [ -s "$DropboxConflictedLog" ]; then
    DropboxConflictedRemoved=${DropboxConflictedLog/.log/-removed}
    mkdir $DropboxConflictedRemoved
    removedRestore="$DropboxConflictedRemoved-restore.sh"
    echo '# vim: nowrap:' > $removedRestore
    echo '' >> $removedRestore
    sed -i '1,2d' $DropboxConflictedLog  # remove the vim modeline
    while IFS= read -r dcc; do
      removedRelativePath=${dcc/$Drpbx\//}
      removedFlattenedPath=${removedRelativePath//\//--}
      removedFPNS=${removedFlattenedPath// /_}
      removed="$DropboxConflictedRemoved/$removedFPNS"
      mv "$dcc" "$removed"
      echo $"mv $'${removed//\'/\\\'}' $'${dcc//\'/\\\'}'" >> $removedRestore
    done < $DropboxConflictedLog
    rm $DropboxConflictedLog
    gvim $removedRestore
    cd $Drpbx/conflicted
  else
    echo "you should've ${tpf7b}dcc0${tpfn}"
  fi
}  # moves them to  $Drpbx/conflicted

#=> imagey
alias ns='nsxiv -frt * &'  # using fullscreen, recursively open all flat
ff () { feh "$1" & }
FF () { feh -F "$1" & }
PSpmm () { echo $(bc <<< "scale=0; $1 * 0.3528 / 1")mm; } # PostScript points to millimetres

ir () { mapfile -t images < <(fd -e jpg)
  for image in "${images[@]}"; do identify -format '%w %h %f \n' "$image"; done
  } # image resolutions
# while :; do ir; sleep 9; tput reset; done

S () { bash $Imagey/Scan.sh $1 $2 $3 $4; }
  sH () { S HPEn 3 $1 $2; t $1.tiff; }  # call SANE's scanimage tool, and convert to jpg

#==> convert all webp to jpg
w2j () {
  for w in *.webp; do convert $w ${w/.webp/_webp.jpg}; done
}

#==> copy a directory of sketches darker
dsd () {
  id=${1%/}
  if [[ -d $id ]]; then
    [[ -d $id-gamma03 ]] && rm -r $id-gamma03
    mkdir $id-gamma03
    echo $id-gamma03
    cd $id
    i=0
    for j in *.jpg; do convert $j -level 0%,100%,0.3 ../$id-gamma03/$j; done
    cd ..
  else
    echo "$id ain't there"
  fi  # darken sketches with ImageMagick
}

#==> images to jpg
t () {
  bash $Imagey/itj.sh $1 "-quality 70"
}  # most useful for scanned tiff's

# won't work with white-spaces in file names

#===> adjust
cg () {
  bash $Imagey/itj.sh $1 "-colorspace gray -quality 80"
}
cr () {
  bash $Imagey/itj.sh $1 -resize $2
}
crg () {
  bash $Imagey/itj.sh $1 "-colorspace gray -resize" $2
}
csd () { # darken, and slightly reduce filesize
  bash $Imagey/itj.sh $1 "-level 25%,100%,.5 -quality 50"
}
cssd () { # lose lighter stuff, darken, and slightly reduce filesize
  bash $Imagey/itj.sh $1 "-level 25%,75%,.5 -quality 50"
}

#==> jpeg orientation
# Recursively find all *.jpg (- that's case insensitive) files in the current directory
# and set  -orientation=Horizontal   if necessary.
jpo () {
  exiftool -r -ext jpg -overwrite_original -orientation=Horizontal -progress -if '$orientation =~ /Rotate/' .
}

#==> lighten an image
cl () {
  inimag=${1%.*}
  convert $1 -level 0,75% -quality 80 $inimag-l.jpg
}

#==> pqiv
# $ABjo/wm/pqivrc  - sets defaults of no info, sorted
alias pq='pqiv * &'
alias pqs='pqiv -d 2 -F -s * &'  # 2s fade slideshow

#=> Jekyll
js () { cd $JHm; echo $JHm; bundle exec jekyll serve --drafts; }
jt () { cd $JHm; rm tag/*; python $JHm/_plugins/compile_tags.py; cd tag; }

