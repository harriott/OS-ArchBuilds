#!/bin/sh
# vim: ft=sh sw=2:

# symlinked in  $bSc/symlinks/jo-0.sh  to  /home/jo/.bashrc-console
# sourced by  $Bash/bash_profile  &  $machBld/jo/Bash/bashrc
# useful also in Console as user

# -----------------------------------------------------------
# These are more settings that can also be useful in Console.
# -----------------------------------------------------------

# Joseph Harriott

# Emacs
a (){ emacs --no-splash -fh $1 & }  # GUI
et (){ emacs -nw $1; }  # in terminal

#=> Bash interface
alias o=echo

# bigger command history
export HISTFILESIZE=10000
export HISTSIZE=1000

# command not found hook
source /usr/share/doc/pkgfile/command-not-found.bash

# for nnn & tmux
export EDITOR=nvim
export VISUAL=gvim

# pipx shell completions
eval "$(register-python-argcomplete pipx)"

#==> prompt
# a colorised (bold blue) prompt, with git support
source /usr/share/git/completion/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
GIT_PS1=$(__git_ps1 " (%s)")  # comment out if entering a huge repository such as  nerd-fonts
longPrompt='\[\e[1;34m\][\w$GIT_PS1]\$\[\e[0m\] '
shortPrompt=false
PS1=$longPrompt

# toggle short prompt
sp (){
  if $shortPrompt; then
    PS1=$longPrompt
    shortPrompt=false
  else
    PS1='\[\e[1;34m\][\W]\$\[\e[0m\] '
    shortPrompt=true
  fi
}

#=> file manage
alias rsA0='bash $onGH/rsync-portabledrives/rsync-Dr0archive.sh'
alias rsA1='bash $onGH/rsync-portabledrives/rsync-Dr1archive.sh'

C (){
  if [ $1 ]; then
    CliFM -A $1
  else
    CliFM -A .
  fi
}  # CliFM (show hidden)
CliFM (){
  clifm --cd-on-quit --disk-usage --rl-vi-mode --trash-as-rm "$@"
  dir="$(grep "^\*" "/home/jo/.config/clifm/.last" 2>/dev/null | cut -d':' -f2)";
  [ -d "$dir" ] && cd -- "$dir"
} # C <dir1> [<dir2> ...]

locx () { locate -i $1 | xcol $1; }

#==> date time-sorted lists of files
fa () {
  eval "find * $printfDTsort"
}  # all files

fRs () {
  echo $1
  echo $2
  if [ $2 ]; then
    tf=$rsnapshot/tds_find
    echo "$1 $2" > $tf
    echo '' >> $tf
    eval "find $rsnapshot/*/localhost$1 -type f -name \"*$2*\" $printfDTsort" >> $tf
    echo '- now look in  $rsnapshot/tds_find'
  else
    echo "fdtsRsnapshot <directoryToSearchIn> <fileToSearchFor>"
  fi
} # no spaces in arguments

#===> by extension
alias fx='fdtsExt'
# fx gfm

fdtsExt () {
  if [ $1 ]; then
    if [ $1 = "gitignore" ]; then
      search='\.$1'
    else
      search='\*.$1'
    fi
    dtsfile=dts-$1.list
    eval "fdtsKS $search $dtsfile"
    [[ $1 = @(gitignore|pl|tex|txt) ]] && ctfp $dtsfile
  else
    echo "^ need a file type (= filename extension)"
  fi
}

#===> by keystring in name
alias fk=fdtsKeyString

fdtsKeyString () {
  if [ $1 ]; then
    dtsfile=dts-$1_in_name.txt
    search='\*$1\*'
    eval "fdtsKS $search $dtsfile"
  fi
}

#===> common functionality
ctfp () {
  # corrects to full path
  sed -i "s| \.| $PWD|" $1
}

export printfDTsort='-printf %TY-%Tm-%Td\ %TH:%TM\ %p\\n | sort'

fdtsListHeader () {
  echo "vim: ft=fdtslist:" > $1
  echo "" >> $1
  echo $PWD >> $1
  echo "" >> $1
}

fdtsKS () {
  fdtsListHeader $2
  eval "find -iname \"$1\" $printfDTsort >> $2"
  echo "" >> $2
  echo "results are in $2"
} # $1 being the keystring

#===> my Arch Forum issues
# $IT1/dts-ft_bbcode.list
# $ITstack/dts-ft_bbcode.list

fdtsbbcode () {
  dtsfile=dts-ft_bbcode.list
  fdtsListHeader $dtsfile
  rg -ttxt -l --sort modified 'ft=bbcode' >> $dtsfile
  echo "results are in $dtsfile"
}

#==> file mime types
fmtypes () {
  fml=file-mime.list
  echo "vim: ft=fileMimeList:" > $fml
  echo "" >> $fml
  fd -tf -x file -i {} | sort >> $fml
  echo "" >> $fml
}

#==> Git
# fx gitignore

alias ga='git add'
alias gis='git status -u'
export BFG=$CrPl/bfg-1.13.0.jar
gic () { git commit -m "$1"; }

#===> time-sorted lists of files
gitc () {
  gitcl=git_config.list
  echo 'vim: nospell:' > $gitcl
  echo '' >> $gitcl
  for f in $(fd -HI -tf ^config$); do sm $f; done | sort >> $gitcl
  echo "results are in $gitcl"
}

#====> my GitHub issues
# $IT1/GitHubIssues.list
# $ITstack/GitHubIssues.list

ghi () {
  ghil=GitHubIssues.list
  for f in $(rg -l -tmd 'github.com.+issues'); do sm $f; done | sort > $ghil
  sed -i '/copied\/IT-handy\//d' $ghil
  sed -i '1s/^/\n/' $ghil
  sed -i '1ivim: ft=fdtslist' $ghil
  echo '' >> $ghil
  echo "results are in $ghil"
}

#==> lists of files by content
rgl () {
  cd $Drpbx/JH
  echo 'vim: ft=fdtslist:' > rgl.list; echo '' >> rgl.list
  for ITd in $IT1 $ITstack; do
    rgc="rg -l $1 $ITd"
    echo '' >> rgl.list; echo $rgc >> rgl.list
    echo '' >> rgl.list; $rgc >> rgl.list; echo '' >> rgl.list
  done
}

SE () {
  cd $Drpbx/JH
  echo 'vim: ft=fdtslist:' > SE.list
  echo '' >> SE.list
  rg -l -tmd 'stackexchange' $ITstack | sort >> SE.list
  rg -l -tmd 'stackexchange' $IT1 | sort >> SE.list
  echo '' >> SE.list
  echo 'now open SE.list'
}

#==> my Encrypted directories
#  fa | grep Digital0
#  fa | grep Secure0
#  fa | grep Secure1
#  fa | grep Stack

#===> quick-check
alias fe='fdtsEncryptedChanges'

Encrypted=(Digital0 Digital1 Secure0 Secure1 SHG Stack)
fdtsEncryptedChanges () {
  if [ "$PWD" != $Enc ]; then
    if [ -d "$Enc" ]; then
      cd $Enc; pwd
    else
      echo "$Enc ain't there"; return
    fi
  fi
  for E in ${Encrypted[@]}; do
    f7z="find . -iname \"$E*.7z\" | sort | tail -1"
    ed7z=$(eval "$f7z")
    if [ $ed7z ]; then
      tput setaf 5
      eval "find . -iname \"$E*.7z\" $printfDTsort"
      tput setaf 7
      eval "find -path \"./$E*\" -newer $ed7z $printfDTsort"
      # - fails to detect change of year
      eval "find \"$core/encrypted\" -name \"$E*\" -newer $ed7z"
    fi
  done
}

#==> only useful in sbMb
# and not needed as root

if [ $host = 'sbMb' ]; then

  alias rsM='bash $onGH/rsync-drives/sbMb/rsync-Music.sh'
  alias rsV='bash $onGH/rsync-drives/sbMb/rsync-Vs.sh'
  alias rsVe='bash $onGH/rsync-drives/sbMb/rsync-Vs-extra.sh'

  fS () {
    find /mnt/WD30EZRZ/Sync2 -type f -name "*$1*"
  }

fi

#==> Samokovarov's  jump
if [ -s "/usr/bin/jump" ]; then
  eval "$(jump shell)"  # makes further adjustments to  PROMPT_COMMAND
fi

#==> trash-cli
alias gte='gio trash --empty'
alias tl='trash-list'
alias tre='trash-restore'

#=> my preferred npm global directory
export PATH="$HOME/.npm-global/bin:$PATH"

#=> nnn
[ -n "$NNNLVL" ] && PS1="N$NNNLVL $PS1"

# cd on quit
n()
{
    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, export NNN_TMPFILE after the call to nnn

    [ -s "/usr/bin/cpg" ] && progress=-r  # advcpmv is installed
    nnn $progress -Q -U "$@"
    export NNN_TMPFILE=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd

    if [ -f $NNN_TMPFILE ]; then
            . $NNN_TMPFILE
            rm -f $NNN_TMPFILE > /dev/null
    fi
}

# ~/.config/nnn/.selection

export NNN_BMS="a:/home/jo/.local/share/mail;i:$Drpbx/JH/technos/IT1;j:/run/media/jo;l:$Drpbx/JH/work/ST/LPD/IdF;m:$Drpbx/CAM-toSort0;r:$Drpbx/JH/copied/France/places/IdF/transport/RATP;s:$Drpbx/JH/CforWork/Education/Science-Engineering;t:$Drpbx/JH/F+F/fromDiptonAvenue/ThaverMohammed;w:$Drpbx/JH/Then0/Deauram/with"
#  only first 10 get loaded correctly
#
#  a:/home/jo/.local/share/mail
#  i:$Drpbx/JH/technos/IT1
#  j:/run/media/jo
#  l:$Drpbx/JH/Work/ST/LPD/IdF
#  m:$Drpbx/CAM-toSort0
#  r:$Drpbx/JH/copied/France/Places/IdF/Transport/RATP
#  s:$Drpbx/JH/CforWork/Education/Science-Engineering
#  t:$Drpbx/JH/F+F/fromDiptonAvenue/ThaverMohammed
#  w:$Drpbx/JH/Then0/Deauram/with
#
export NNN_COLORS='5723' # good for my tmux in urxvt
export NNN_CONTEXT_COLORS="2136" # use a different color for each context
export NNN_PLUG='c:fzcd;d:dragdrop;i:ipinfo;o:fzopen;m:mediainf;t:treeview;u:uidgid'  # quit treeview's nvim with ZQ
export NNN_TRASH=1 # trash (needs trash-cli) instead of delete
export NNN_LOCKER='saidar -c' # for 0

#=> system
alias i=pinfo
alias im='pinfo -m'
export GPG_TTY=$(tty)  # correct TTY for GnuPG

#==> for AUR packages
# "Get Clone To Make" - for my building of AUR development packages
gctm(){ cd $HOME/Arch/AURdev-make; rAUR $1; cp -r ../AURdev-clone/$1 $1; cd $1; }; export -f gctm

# get into an AUR repository
gAUR () { cd "$HOME/Arch/AUR$2"; rAUR $1; trizen -G $1; cd $1; }; export -f gAUR

# get into an AUR development repository
gdAUR () { gAUR $1 dev-clone; gctm $1; }; export -f gdAUR

# remove an AUR repository if it's there
rAUR(){ [ -d $1 ] && sudo rm -r $1; }; export -f rAUR

