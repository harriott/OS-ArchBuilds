#!/bin/bash
# vim: ft=sh sw=2:

# $AjB/bashrc-console  symlink ($OSAB/bs-symlinks/jo-0.sh)
#  sourced by  $AjB/bash_profile  &  $machBld/jo/Bash/bashrc

# useful also in Console as user

# -----------------------------------------------------------
# These are more settings that can also be useful in Console.
# -----------------------------------------------------------

# Joseph Harriott

export loaded_bc=1  # used in  $OSAB/bs-symlinks/repair.sh
export SUDO_PROMPT="$(tput setab 1 setaf 7 bold)[sudo]$(tput sgr0) $(tput setaf 6)password for$(tput sgr0) $(tput setaf 5)%p$(tput sgr0): "

ra () {
  pactl set-sink-volume 0 60%  # master volume to non-distorting level
  if [ $1 ]; then o=$1; else o=a; fi
  rec -c 2 $o.flac  # SoX
} # ra <stereoAudioRecording>

#=> Bash interface
alias o=echo

# bigger command history
export HISTFILESIZE=20000  # lines
export HISTSIZE=1000  # commands
# defaults are 500

# command not found hook
source /usr/share/doc/pkgfile/command-not-found.bash

# for nnn & tmux
export EDITOR=nvim
export VISUAL=gvim

# pipx shell completions
eval "$(register-python-argcomplete pipx)"

#==> prompt
source "/usr/share/git/completion/git-prompt.sh"; source $OSL/bashrc-console-prompt

#=> file manage
alias rsA0='bash $onGH/rsync-portabledrives/rsync-Dr0archive.sh'
alias rsA1='bash $onGH/rsync-portabledrives/rsync-Dr1archive.sh'
alias v=vifm
source $OSL/bashrc-console-fm

C (){
  if [ $1 ]; then
    CliFM -A $1
  else
    CliFM -A .
  fi
}  # CliFM (show hidden)
CliFM (){
  clifm --cd-on-quit --disk-usage --rl-vi-mode --trash-as-rm "$@"
  dir="$(grep "^\*" "/home/jo/.config/clifm/.last" 2>/dev/null | cut -d':' -f2)";
  [ -d "$dir" ] && cd -- "$dir"
} # C <dir1> [<dir2> ...]

fRs () {
  echo "directory: $1"
  echo "file glob to find: $2"
  if [ $2 ]; then
    tf="$rsnapshot/tds_find"
    echo 'vim: nowrap:' > $tf
    echo >> $tf
    echo "$1 $2" >> $tf
    echo >> $tf
    eval "find $rsnapshot/*/localhost$1 -type f -name \"*$2*\" $printfDTsort" >> $tf
    echo '- now look in  $rsnapshot/tds_find'
  else
    echo "fdtsRsnapshot <directoryToSearchIn> <fileToSearchFor>"
  fi
} # no spaces in arguments

if [ -s "/usr/bin/jump" ]; then
  eval "$(jump shell)"  # o $PROMPT_COMMAND
fi # gsamokovarov's jump

alias zo='zoxide query -ls'
if [ -s "/usr/bin/zoxide" ]; then
  eval "$(zoxide init bash)"  # o $PROMPT_COMMAND
fi

dcp (){
    dcpo="$machLg/dircolors-p.txt"
    echo '# vim: ft=dircolors:' > $dcpo
    echo '' >> $dcpo
    dircolors -p >> $dcpo
    echo '' >> $dcpo
}

#==> Git
# fx gitignore

alias ga='git add'
alias gsbs='git status -bs'
alias gsu='git status -u'
export BFG=$CrPl/bfg-1.13.0.jar
gic () { git commit -m "$1"; }

#===> time-sorted - .git/config
# $ITstack/git_config.fetl

gitc () {
  gitcl=dts-git_config.fetl
  echo '' > $gitcl
  for f in $(fd -HI -tf ^config$); do sm $f; done | sort >> $gitcl
  echo "results are in $gitcl"
}

#===> time-sorted - my GitHub issues
# $jtIT/GitHubIssues.fetl
# $ITstack/GitHubIssues.fetl

ghi () {
  ghil=GitHubIssues.fetl
  for f in $(rg -l -tmd 'github.com.+issues'); do sm $f; done | sort > $ghil
  sed -i '/copied\/IT-handy\//d' $ghil
  sed -i '1s/^/\n/' $ghil
  echo '' >> $ghil
  echo "results are in $ghil"
}

#==> lists of files by content
rgIT () {
  cd $DJH/search
  f=IT-rg.fetl  # $DJH/search/IT-rg.fetl
  echo '' > $f
  for ITd in $jtIT $ITstack; do
    rgc="rg -l $1 $ITd"
    echo '' >> $f; echo $rgc >> $f
    echo '' >> $f; $rgc >> $f; echo '' >> $f
  done
  echo "- now open  $DJH/search/IT-rg.fetl"
} # rgIT <text_to_find_in_many_filetypes>

SE () {
  cd $DJH/search
  f=SEN.fetl
  [ -s $f ] && rm $f
  echo '' > $f; echo 'SE  -see  $AjB/bashrc-console'
  for ITd in $jtIT $ITstack $JHw/France; do
    echo '' >> $f
    rg -l -tmd 'stackexchange|stackoverflow|superuser' $ITd | sort >> $f
  done
  echo '' >> $f
  echo 'now open $DJH/search/'$f
} # /stackexchange\|stackoverflow\|superuser

#==> my Encrypted directories
#  fa | grep Digital0
#  fa | grep Secure0
#  fa | grep Secure1
#  fa | grep Stack

#===> quick-check
alias fe='fdtsEncryptedChanges'

Encrypted=(Digital0 Digital1 Secure0 Secure1 SHG Stack)
fdtsEncryptedChanges () {
  if [ "$PWD" != $Enc ]; then
    if [ -d "$Enc" ]; then
      cd $Enc; pwd
    else
      echo "$Enc ain't there"; return
    fi
  fi
  for E in ${Encrypted[@]}; do
    f7z="find . -iname \"$E*.7z\" | sort | tail -1"
    ed7z=$(eval "$f7z")
    if [ $ed7z ]; then
      tput setaf 5
      eval "find . -iname \"$E*.7z\" $printfDTsort"
      tput setaf 7
      eval "find -path \"./$E*\" -newer $ed7z $printfDTsort"
      # - fails to detect change of year
      eval "find \"$core/encrypted\" -name \"$E*\" -newer $ed7z"
    fi
  done
}

#==> only useful in sbMb
# and not needed as root

if [ $host = 'sbMb' ]; then

  alias rsM='bash $onGH/FM-rsync-drives/sbMb/Music.sh'
  alias rsV='bash $onGH/FM-rsync-drives/sbMb/Vs.sh'
  alias rsVe='bash $onGH/FM-rsync-drives/sbMb/Vs-extra.sh'

  fS () {
    find /mnt/WD30EZRZ/Sync2 -type f -name "*$1*"
  }

fi

#==> trash-cli
alias gte='gio trash --empty'
alias tl='trash-list' # can give clues if python errors
alias tre='trash-restore'

#=> human language - dict
alias del='dict -d elements'  # del iron

# English:
alias dmt='dict -d moby-thesaurus'  # dmt fuck
alias dwn='dict -d wn'  # dwn fuck

# French translate
alias def='dict -d fd-eng-fra'  # def fuck
alias dfe='dict -d fd-fra-eng'  # dfe facture

#=> human language - Verbiste
alias decon='french-deconjugator'  # decon aimâmes

con () {
  fco="$(french-conjugator "$1")"
  oneline="${fco//$'\n'/ }"
  trimmed="$(echo "$oneline" | cut -c 3- | rev | cut -c 3- | rev)"
  flagged="${trimmed//$' - '/≡}"
  IFS="≡" read -r -a array <<< "$flagged"
  for conjugation in "${array[@]}"; do
    tense="$(echo "$conjugation" | sed 's/:.\+//')"
    conjugations="$(echo "$conjugation" | sed 's/.\+: //')"
    spaced="$(echo "$conjugations" | sed 's/ /  /g')"
    echo -e "\e[32m $tense \e[1;33m $spaced \e[0m"
  done
} # con <a_French_infinitive>, con être

#=> npm global directory
export PATH="$HOME/.npm-global/bin:$PATH"

#=> pipx exposed binaries
export PATH="$PATH:$HOME/.local/bin"  # for  pipx  installed commands

#=> Ruby gems
if [ -s "/usr/bin/ruby" ]; then
  export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"
  export PATH="$PATH:$GEM_HOME/bin"
fi

#=> system
alias i=pinfo
alias im='pinfo -m'
export GPG_TTY=$(tty)  # correct TTY for GnuPG

#==> for AUR packages
# "Get Clone To Make" - for my building of AUR development packages
gctm(){ cd $HOME/Arch/AURdev-make; rAUR $1; cp -r ../AURdev-clone/$1 $1; cd $1; }; export -f gctm

# get into an AUR repository
gAUR () { cd "$HOME/Arch/AUR$2"; rAUR $1; trizen -G $1; cd $1; }; export -f gAUR
# if fail to enter pw in time for trizen, pacman -U package_name-version.pkg.tar.xz

# get into an AUR development repository
gdAUR () { gAUR $1 dev-clone; gctm $1; }; export -f gdAUR

# remove an AUR repository if it's there
rAUR(){ [ -d $1 ] && sudo rm -r $1; }; export -f rAUR

#=> text wrangling
nn () { nvim $@; cd $(cat ~/lastVimDirectory); } # see  $vfv/enter/vimrc.vim

# Emacs
G (){ emacs --no-splash -fh $1 & }  # GUI
T (){ emacs -nw $1; }  # in terminal

