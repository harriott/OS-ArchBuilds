#!/bin/sh
# vim: ft=sh sw=2:

# sourced by  $Bash/bash_profile  &  $MACHINE/jo/Bash/bashrc
# useful also in Console as user

# -----------------------------------------------------------
# These are more settings that can also be useful in Console.
# -----------------------------------------------------------

# Joseph Harriott

#=> Bash interface
# bigger command history
export HISTFILESIZE=10000
export HISTSIZE=1000

# a colorised (bold blue) prompt, with git support
source /usr/share/git/completion/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
PS1='\[\e[1;34m\][\w$(__git_ps1 " (%s)")]\$\[\e[0m\] '

# command not found hook
source /usr/share/doc/pkgfile/command-not-found.bash

# for nnn & tmux
export EDITOR=nvim
export VISUAL=gvim

# pipx shell completions
eval "$(register-python-argcomplete pipx)"

# short prompt
sp (){ PS1='\[\e[1;34m\][\W]\$\[\e[0m\] ';}

#=> file manage
alias rsA0='bash $onGH/rsync-portabledrives/rsync-Dr0archive.sh'
alias rsA1='bash $onGH/rsync-portabledrives/rsync-Dr1archive.sh'

locx () { locate -i $1 | xcol $1; }

#==> Git
alias ga='git add'
alias gis='git status -u'
export BFG=$CP/bfg-1.13.0.jar
gic () { git commit -m "$1"; }

#==> my Encrypted directories
#  fa | grep Digital0
#  fa | grep Secure0
#  fa | grep Secure1
#  fa | grep Stack

#===> quick-check
alias fe='fdtsEncryptedChanges'

Encrypted=($Storage/Encrypted Digital0 Digital1 Secure0 Secure1 SHG Stack)
fdtsEncryptedChanges () {
  if [ "$PWD" != ${Encrypted[0]} ]; then
    cd ${Encrypted[0]}
    pwd
  fi
  for i in ${!Encrypted[@]}; do
    if [ $i -gt 0 ]; then
      f7z="find . -iname \"${Encrypted[$i]}*.7z\" | sort | tail -1"
      ed7z=$(eval "$f7z")
      if [ $ed7z ]; then
        tput setaf 5
        eval "find . -iname \"${Encrypted[$i]}*.7z\" $printfDTsort"
        tput setaf 7
        eval "find -path \"./${Encrypted[$i]}*\" -newer $ed7z $printfDTsort"  # fails to detect change of year
      fi
    fi
  done
}

#==> only useful in sbMb
# and not needed as root

if [ $host = 'sbMb' ]; then

  alias rsM='bash $onGH/rsync-portabledrives/rsync-Music.sh'
  alias rsVP='bash $onGH/rsync-portabledrives/rsync-VsPref.sh'

  fS () {
    find /mnt/WD30EZRZ/Sync2 -type f -name "*$1*"
  }

fi

#==> Samokovarov's  jump
if [ -s "/usr/bin/jump" ]; then
  eval "$(jump shell)"  # makes further adjustments to  PROMPT_COMMAND
fi

#==> time-sorted lists of files - all
alias fa='fdtsAll'

fdtsAll () {
  eval "find * $printfDTsort"
  echo "$printfDTsort"
}

#==> time-sorted lists of files - by extension
alias fx='fdtsExt'
# fx gfm
# fx gitignore

fdtsExt () {
  if [ $1 ]; then
    if [ $1 = "gitignore" ]; then
      dtsfile=dts-$1-all.txt
      search=.$1
    else
      dtsfile=dts-$1.txt
      search='\*.$1'
    fi
    eval "fdtsKS $search $dtsfile"
    [[ $1 = @(gitignore|pl|tex|txt) ]] && ctfp $dtsfile
  else
    echo "^ need a file type (= filename extension)"
  fi
}

#==> time-sorted lists of files - bbcode
fdtsbbcode () {
  dtsfile=dts-bbcode.txt
  ftListHeader $dtsfile
  rg -ttxt -l --sort modified 'ft=bbcode' >> $dtsfile
}

#==> time-sorted lists of files - by keystring in name
alias fk=fdtsKeyString

fdtsKeyString () {
  if [ $1 ]; then
    dtsfile=dts-$1_in_name.txt
    search='\*$1\*'
    eval "fdtsKS $search $dtsfile"
  fi
}

#==> time-sorted lists of files - common functionality
ctfp () {
  # corrects to full path
  sed -i "s| \.| $PWD|" $1
}

export printfDTsort='-printf %TY-%Tm-%Td\ %TH:%TM\ %p\\n | sort'

ftListHeader () {
  echo "vim: ft=ftlist nowrap tw=0:" > $1
  echo "" >> $1
  echo $PWD >> $1
  echo "" >> $1
}

fdtsKS () {
  ftListHeader $2
  eval "find -iname \"$1\" $printfDTsort >> $2"
  echo "" >> $2
  echo "results are in $2"
} # $1 being the keystring

#==> trash-cli
alias gte='gio trash --empty'
alias tl='trash-list'
alias tre='trash-restore'

#=> my preferred npm global directory
export PATH="$HOME/.npm-global/bin:$PATH"

#=> system
export GPG_TTY=$(tty)  # correct TTY for GnuPG

#==> for AUR packages
# "Get Clone To Make" - for my building of AUR development packages
gctm(){ cd $HOME/Arch/AURdev-make; rAUR $1; cp -r ../AURdev-clone/$1 $1; cd $1; }; export -f gctm

# get into an AUR repository
gAUR () { cd "$HOME/Arch/AUR$2"; rAUR $1; trizen -G $1; cd $1; }; export -f gAUR

# get into an AUR development repository
gdAUR () { gAUR $1 dev-clone; gctm $1; }; export -f gdAUR

# remove an AUR repository if it's there
rAUR(){ [[ -d $1 ]] && sudo rm -r $1; }; export -f rAUR

