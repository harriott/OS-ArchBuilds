#!/bin/bash
# vim: ft=sh sw=2:

# $AjB/bashrc-console-fm  sourced by  $AjB/bashrc-console  &  $MSWSL\bashrc

#=> dts
# date time-sorted lists of files

fa () { eval "find * $printfDTsort"; }  # all files

fRs () {
  echo "directory: $1"
  echo "file glob to find: $2"
  if [ $2 ]; then
    tf="$rsnapshot/tds_find"
    echo 'vim: nowrap:' > $tf
    echo >> $tf
    echo "$1 $2" >> $tf
    echo >> $tf
    eval "find $rsnapshot/*/localhost$1 -type f -name \"*$2*\" $printfDTsort" >> $tf
    echo '- now look in  $rsnapshot/tds_find'
  else
    echo "fdtsRsnapshot <directoryToSearchIn> <fileToSearchFor>"
  fi
} # no spaces in arguments

#==> by extension
alias fx='fdtsExt'
# fx gfm
# fx gitignore  # $DJH/search/dts-gitignore.fetl

fdtsExt () {
  if [ $1 ]; then
    fdtsKSsearch="*.$1"; [[ $1 = 'gitignore' ]] && fdtsKSsearch=".$1"
    [[ $1 = "py" || $1 = "tex" ]] && fdtsKSprune=$'-path \'*/JH/copied/*\' -prune -o -path \'*/CGHrepos/*\' -prune -o -path \'*/vimfiles/*\' -prune -o'
    # still allows  fx tex  in  $JCop, $CGHrepos, &  $vimfiles
    fdtsKSlist=dts-$1.fetl
    fdtsKS
    # [[ $1 = @(gitignore|pl|tex|txt) ]] && sed -i "s| \.| $PWD|" $fdtsKSlist
  else
    echo "^ need a file type (= filename extension)"
  fi
}

#==> by keystring in name
alias fk=fdtsKeyString

fdtsKeyString () {
  if [ $1 ]; then
    fdtsKSlist=dts-$1_in_name.fetl
    fdtsKSsearch="*$1*"
    eval "fdtsKS $search $dtsfile"
  fi
}

#==> common functionality
export printfDTsort='-printf %TY-%Tm-%Td\ %TH:%TM\ %p\\n | sort'
fdtsListHeader () { echo "" > $1; echo $PWD >> $1; echo "" >> $1; }

fdtsKS () {
  fdtsListHeader $fdtsKSlist
  eval "find . $fdtsKSprune -iname \"$fdtsKSsearch\" $printfDTsort >> $fdtsKSlist"
  echo "" >> $fdtsKSlist
  echo "results are in $fdtsKSlist"
} # internal use only

#==> my Arch Forum issues
# $DJH/search/dts-ft_bbcode.fetl

fdtsbbcode () {
  dtsfile=dts-ft_bbcode.fetl
  fdtsListHeader $dtsfile
  fd -tf -e bbcode >> $dtsfile
  echo >> $dtsfile
  rg -ttxt -l --sort modified 'ft=bbcode' >> $dtsfile
  echo "results are in $dtsfile"
}

#=> file mime types
fmtypes () {
  fml=file-mime.list
  echo "vim: ft=fileMimeList:" > $fml
  echo "" >> $fml
  fd -tf -x file -i {} | sort >> $fml
  echo "" >> $fml
} # use to check within a directory

#=> filetype frequencies
exts () { fd -tf -u '\..+' | sed -n 's/..*\.//p' | sort | uniq -c; } # counted by extensions

ve () {
  exts > exts0
  sed -i 's/^ \+//' exts0
  sed -i 's/ /`/' exts0
  sed -i 's/\r/ /' exts0
  sort -nr exts0 > exts1; rm exts0
  sed -i '0,/^1`/ s/^1`/\n1`/' exts1  # add line before counts of 1, which could be many
  paste -sd ' ' exts1 > exts.exts; rm exts1  # concatenate all lines
  sed -i '1i\\' exts.exts  # prepend a blank line
  sed -i 's/  /\n\n/' exts.exts  # separate out those counts of 1
  echo '' >> exts.exts
  echo "- now look in exts.exts"
} # sorted by frequency, making use of  $vimfiles/syntax/exts.vim

#=> nnn
[ -n "$NNNLVL" ] && PS1="N$NNNLVL $PS1"

n() {
  # no nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || { echo "nnn is already running"; return; }
  NNN_TMPFILE=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd  # cd on quit only on ^G
  [ -s "/usr/bin/cpg" ] && progress=-r  # advcpmv is installed
  command nnn $progress -Q -U "$@"
  if [ -f $NNN_TMPFILE ]; then
    # ~/.config/nnn/.lastd  was created when quitting  nnn, so
    . $NNN_TMPFILE
    rm -f $NNN_TMPFILE > /dev/null
  fi
}

# ~/.config/nnn/.selection - only populated when I've selected some files

source $ulLA/jo/bashrc-console-NNN_BMS  # my bookmarks
export NNN_COLORS='5723' # good for my tmux in urxvt
export NNN_PLUG='c:fzcd;d:dragdrop;g:gitroot;i:ipinfo;j:autojump;o:fzopen;m:mediainf;s:chksum'
export NNN_TRASH=1 # trash (needs trash-cli) instead of delete
export NNN_LOCKER='saidar -c' # for 0

# t (sort)
#  a/d = (d &) apparent/disk usage
#  c = clear
#  e = extension
#  r = reverse
#  s = file size
#  t = time
#  v = version (of what?)

